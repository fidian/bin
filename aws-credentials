#!/usr/bin/env bash
# Sets AWS environment variables based on saved configurations.
# Use `aws configure` and `aws configure --profile=XXXXX` to create and
# update keys in profiles.

# Get a list of AWS credential sets or assign a set to the environment.
#
# $1 - Name of credential set to assign.  Optional.
#
# Returns nothing.
aws-credentials() {
    local key

    if [[ ! -f ~/.aws/credentials ]]; then
        echo "Missing AWS credentials file"
    fi

    aws-credentials::ini-parse AWSCRED "$(cat ~/.aws/credentials)"

    if [[ -n "$1" ]]; then
        key=$(aws-credentials::ini-key-name AWSCRED "$1")

        if [[ -n "${!key}" ]]; then
            aws-credentials::set-config "$1"
            aws-credentials::ini-clean AWSCRED

            return
        fi
    fi

    echo "Available profiles:"
    echo "${AWSCRED[@]}"

    aws-credentials::ini-clean AWSCRED
}


# Hex encodes a string and writes it to stdout.
#
# Parameters:
#     $1: The string to encode.
aws-credentials::encode-string() {
    local C OUT

    IN="$1"
    OUT=

    while [[ "${#IN}" -gt 0 ]]; do
        C=${IN:0:1}
        printf -v C "%x" "'$C"
        OUT="$OUT$C"
        IN="${IN:1}"
    done

    echo "$OUT"
}


# Removes INI file variables from memory
#
# $1 - Prefix.
# $2 - Section name.
# $3 - Key name
aws-credentials::ini-clean() {
    local key

    key=$(aws-credentials::ini-key-name "${1-}" "${2-}" "${3-}")

    if [[ -z "$3" ]]; then
        eval "local child; for child in \"\${${key}[@]}\"; do aws-credentials::ini-clean \"\$@\" \"\$child\"; done"
    fi

    eval "unset '$key'"
}

# Parses any INI file into the environment.  Variables are set like this:
#
#     PREFIX=(array of section names)
#     PREFIX__SECTION=true
#     PREFIX__SECTION__KEY=value
#
# The SECTION and KEY portions are hex encoded to ensure they are valid
# variable names.
#
# If you have a solution to remove `eval` from this code, I would love to
# hear from you.
#
# Parameters:
#     $1: Prefix for variables.
#     $2: INI file contents
aws-credentials::ini-parse() {
    local KEY OLD_IFS PREFIX SECTION VALUE

    OLD_IFS=$IFS
    IFS=$'\n'
    SECTION=
    PREFIX="$1"

    eval "${PREFIX}=()"

    while read -r LINE; do
        LINE=$(aws-credentials::trim "$LINE")

        # Eliminate comments
        LINE=${LINE##\#*}
        LINE=${LINE##;*}

        if [[ "${LINE:0:1}" == '[' ]] && [[ "${LINE:${#LINE}-1}" == "]" ]]; then
            LINE=${LINE:1:${#LINE}-2}
            SECTION=$(aws-credentials::trim "$LINE")
            eval "$(aws-credentials::ini-key-name "$PREFIX" "$SECTION")=()"
            eval "${PREFIX}[\${#${PREFIX}[@]}]=\"\$SECTION\""
        elif [[ -n "$LINE" ]]; then
            IFS="="
            read -r KEY VALUE <<< "$LINE"
            IFS=$'\n'
            KEY=$(aws-credentials::trim "$KEY")

            if [[ ! -z "$KEY" ]]; then
                VALUE=$(aws-credentials::trim "$VALUE")
                eval "$(aws-credentials::ini-key-name "$PREFIX" "$SECTION")[\${#$(aws-credentials::ini-key-name "$PREFIX" "$SECTION")[@]}]=\"\$KEY\""
                eval "$(aws-credentials::ini-key-name "$PREFIX" "$SECTION" "$KEY")=\$VALUE"
            fi
        fi
    done <<< "$2"

    IFS=$OLD_IFS
}

aws-credentials::ini-key-name() {
    local name

    name="$1"

    if [[ -n "${2-}" ]] || [[ -n "${3-}" ]]; then
        name+="__$(aws-credentials::encode-string "$2")"
    fi

    if [[ -n "${3-}" ]]; then
        name+="__$(aws-credentials::encode-string "$3")"
    fi

    echo "$name"
}


# Sets the configuration to the environment
aws-credentials::set-config() {
    echo "Setting credentials to match profile: $1"

    # Access key ID
    key=$(aws-credentials::ini-key-name AWSCRED "$1" aws_access_key_id)

    if [[ -z "${!key}" ]]; then
        key=$(aws-credentials::ini-key-name AWSCRED default aws_access_key_id)
    fi

    export AWS_ACCESS_KEY_ID=${!key}

    # Secret access key
    key=$(aws-credentials::ini-key-name AWSCRED "$1" aws_secret_access_key)

    if [[ -z "${!key}" ]]; then
        key=$(aws-credentials::ini-key-name AWSCRED default aws_secret_access_key)
    fi

    export AWS_SECRET_ACCESS_KEY=${!key}

    # Region (a different config file)
    if [[ ! -f ~/.aws/config ]]; then
        return
    fi

    aws-credentials::ini-parse AWSCONFIG "$(cat ~/.aws/config)"

    key=$(aws-credentials::ini-key-name AWSCONFIG "profile $1" region)

    if [[ -z "${!key}" ]]; then
        key=$(aws-credentials::ini-key-name AWSCONFIG "default" region)
    fi

    export AWS_DEFAULT_REGION=${!key}
    aws-credentials::ini-clean AWSCONFIG
}


# Trims a string.  Writes the result to stdout.
#
# Parameters:
#     $1: The string to trim
aws-credentials::trim() {
    local OLD STR

    STR=$1
    OLD=

    while [[ "$STR" != "$OLD" ]]; do
        OLD=$STR
        STR=${STR# }
        STR=${STR#$'\n'}
        STR=${STR#$'\r'}
        STR=${STR#$'\t'}
        STR=${STR% }
        STR=${STR%$'\n'}
        STR=${STR%$'\r'}
        STR=${STR%$'\t'}
    done

    echo "$STR"
}

