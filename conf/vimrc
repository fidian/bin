if has("autocmd")
    " Make *.less appear as "less"
    autocmd BufRead,BufNewFile *.less set filetype=less

    " Enable bundles/plugins
    runtime! autoload/pathogen.vim

    if exists("g:loaded_pathogen")
        call pathogen#infect()
    endif
endif

" Turn on syntax highlighting and modelines
if has("syntax")
	syntax on
    set modeline
endif

" Set some colors - http://vimdoc.sourceforge.net/htmldoc/syntax.html#E421
" To test:  :runtime syntax/hitest.vim
" To list:  :hi [Group - optional]
colorscheme koehler
" highlight Search term=underline cterm=underline ctermfg=green ctermbg=darkblue gui=NONE guifg=white guibg=yellow
highlight Comment cterm=NONE ctermfg=cyan gui=NONE guifg=cyan
" highlight Visual cterm=bold ctermfg=black ctermbg=gray
highlight StatusLine cterm=NONE ctermfg=yellow ctermbg=DarkBlue gui=bold guifg=yellow guibg=blue
" highlight String ctermfg=red
 highlight Normal cterm=NONE ctermfg=white guifg=white
" highlight MatchParen term=underline,bold cterm=underline,bold ctermbg=NONE
highlight ErrorMsg term=standout cterm=bold ctermfg=white ctermbg=darkred guifg=Black guibg=Red
highlight Search ctermfg=black ctermbg=yellow cterm=NONE
highlight SpellBad ctermfg=white ctermbg=darkred
highlight MatchParen ctermbg=darkblue ctermfg=gray
highlight StatusLineNC ctermfg=black ctermbg=gray cterm=NONE

" GUI options
set gfn=Anonymous\ Pro\ 14
" colorscheme torte

" Set tab and indent preferences
set expandtab tabstop=4 shiftwidth=4 softtabstop=4 smartindent autoindent

if has("syntax")
	" Stop the annoying behavior of '#' as the first character going to column 1
	inoremap # X<BS>#
endif

" Searching options
set incsearch ignorecase smartcase hlsearch

" Show matching brackets for a short time
set showmatch matchtime=2
set laststatus=2

" Allow backspace for everything
set backspace=indent,eol,start

if has("extra_search")
	" Clear the last search when opening a file
	nohlsearch

	" Unhighlight your search automatically when editing
	" Alternately, the following map will clear your search
	" map \ :noh<cr>
	nnoremap a :noh<CR>a
	nnoremap A :noh<CR>A
	nnoremap i :noh<CR>i
	nnoremap I :noh<CR>I
	nnoremap o :noh<CR>o
	nnoremap O :noh<CR>O
endif

if has("user_commands")
	" Allow F1 to exit edit mode.  Can bring up help, but can also remove help
	inoremap <F1> <Esc>
	noremap <F1> :call MapF1()<CR>

	function! MapF1()
		if &buftype == "help"
			exec 'quit'
		else
			exec 'help'
		endif
	endfunction
endif

" Report after N lines changed; default is two
set report=2

" Start up on the last line we were editing
if has("autocmd")
	autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g`\"" | endif
endif

" Have search results appear in the middle of the screen
nmap n nzzzv
nmap N Nzzzv
nmap * *zzzv
nmap # #zzzv
nmap g* g*zzzv
nmap g# g#zzzv

" Search for "tags" file in current, then through parent directories
set tags=tags;/

" Single-key macros
" nmap Q oecho __FILE__.':'.__LINE__."\n";//NOCOMMIT-DEBUG<esc>

if has("autocmd")
	" Configure Syntastic syntax checking
	" map <F5> :SyntasticToggleMode<CR>

	" Insert <Tab> or complete identifier
	" if the cursor is after a keyword character
	" function MyTabOrComplete()
	" 	let col = col('.')-1
	" 	if !col || getline('.')[col-1] !~ '\k'
	" 		return "\<tab>"
	" 	else
	" 		return "\<C-N>"
	" 	endif
	" endfunction
	" inoremap <Tab> <C-R>=MyTabOrComplete()<CR>

    " Handle mistyped commands
	command W w
	command Wq wq
	command Q q

	" Automatically set up per-filetype settings, like tag matching
	filetype plugin indent on
	runtime macros/matchit.vim

	" Automatically use spaces for YAML
	autocmd Filetype yaml setlocal expandtab

    " Turn on spell checking for Markdown
    autocmd Filetype markdown setlocal spell! spelllang=en_us

    " Navigate to next/previous lint error with Ctrl-PageUp / Ctrl-PageDown
    nnoremap <C-PageUp> :ALEPreviousWrap<cr>
    nnoremap <C-PageDown> :ALENextWrap<cr>

    " Ctrl-? for a type hint
    autocmd FileType typescript nnoremap <silent> <C-?> :ALEHover<CR>
    autocmd FileType javascript nnoremap <silent> <C-?> :ALEHover<CR>


    " Set up linters
    let g:ale_linters = {
    \   'javascript': ['tsserver'],
    \   'typescript': ['tsserver'],
    \}

    " Disable languagetool because it's only meant for text
    let g:ale_linters_ignore = {
    \   'markdown': ['languagetool'],
    \   'asciidoc': ['languagetool']
    \}

    " Set up automatic jumps based on file type, so C-] and C-^ navigate
    " correctly.
    " https://github.com/dense-analysis/ale/issues/1645
    function ALELSPMappings()
        let lsp_found=0

        for linter in ale#linter#Get(&filetype)
            if !empty(linter.lsp) && ale#lsp_linter#CheckWithLSP(bufnr(''), linter)
                let lsp_found=1
            endif
        endfor

        if (lsp_found)
            nnoremap <buffer> K :ALEDocumentation<cr>
            nnoremap <buffer> gr :ALEFindReferences<cr>
            nnoremap <buffer> gd :ALEGoToDefinition<cr>
            nnoremap <buffer> gy :ALEGoToTypeDefinition<cr>
            nnoremap <buffer> gh :ALEHover<cr>
            setlocal omnifunc=ale#completion#OmniFunc
            nnoremap <buffer> <C-]> :ALEGoToDefinition<CR>
		    nnoremap <buffer> <C-^> :ALEFindReferences<CR>
        else
            silent! unmap <buffer> K
            silent! unmap <buffer> gr
            silent! unmap <buffer> gd
            silent! unmap <buffer> gy
            silent! unmap <buffer> gh
            silent! unmap <buffer> <C-]>
            silent! unmap <buffer> <C-^>
        endif
    endfunction

    autocmd BufRead,FileType * call ALELSPMappings()

    " Colorize colors with "c"
    nnoremap <buffer> c :ColorToggle<CR>
endif

" Keep the cursor 5 lines away from the top/bottom
set scrolloff=2

" Spell checking toggle with S
map S :setlocal spell! spelllang=en_us<CR>

" Turn off search wrapping
set nowrapscan

" Set a custom status line
" %< = trim from left, %f = filename, %h = [help], %r = [RO]
" %= = right align, %b = char decimal, %B = char hex
" %c = column number, %V = virtual column number,
" %l = line, %L = total lines, %P = percentage through file
set statusline=%<%f\ %h%m%r%=%b\ 0x%B\ \ \ c%c%V\ +%l/%L\ %P

" Make a copy when making a backup file, then overwrite original
" Works around karma issue #974
set backupcopy=yes

" Highlight characters that cause problems
" \u00a0  hard space, non-breaking space
" \u1680  Ogham space mark (usually read as a dash)
" \u180e  Mongolian vowel separator (no width)
" \u2000  en quad
" \u2001  em quad
" \u2002  en space
" \u2003  em space
" \u2004  three-per-em space
" \u2005  four-per-em space
" \u2006  six-per-em space
" \u2007  figure space
" \u2008  punctuation space
" \u2009  thin space
" \u200a  hair space
" \u200b  zero width space
" \u2014  hyphen (not really whitespace)
" \u202f  narrow non-breaking space
" \u205f  medium mathematical space
" \u3000  ideographic space
" \uffff  zero width non-breaking space
highlight ErrorCharacters ctermbg=red guibg=red
match ErrorCharacters "[\u00a0\u1680\u180e\u2000-\u200b\u2014\u202f\u205f\u3000\uffff]"

" Fold and unfold by using Control-Space.  vim in console sees
" it as Control-@
inoremap <C-Space> <C-O>za
nnoremap <C-Space> za
onoremap <C-Space> <C-C>za
vnoremap <C-Space> zf
inoremap <C-@> <C-O>za
nnoremap <C-@> za
onoremap <C-@> <C-C>za
vnoremap <C-@> zf

" If clipboard is available, set it to the unnamed (middle click) clipboard
" by default.
if has("clipboard")
    set clipboard=unnamed
endif

" Move to another split using C-W and an arrow or C-W and j,k,l,;
" Control-arrow resizes splits
nnoremap <silent> <C-Right> <c-w>>
nnoremap <silent> <C-Left> <c-w><
nnoremap <silent> <C-Down> <c-w>+
nnoremap <silent> <C-Up> <c-w>-

" Split to the bottom right by default. Useful for :Se, :Se!, :Ex, :Ex!
set splitbelow
set splitright

" Swap windows with Ctrl-w w - Press it on source window, then move to target
" and press again.
nnoremap <C-w>w :call WindowSwap#EasyWindowSwap()<CR>

" Change the sort sequence to directories first, then files (case sensitive)
let g:netrw_sort_sequence="\\/$"

" Show quotes in JSON files
let g:vim_json_syntax_conceal = 0
